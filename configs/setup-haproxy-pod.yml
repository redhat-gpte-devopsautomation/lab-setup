---
- name: Play for haproxy pod configuration
  become: true
  block:
    - name: Create haproxy pod directory
      file:
        path: /opt/podman/resources/haproxypod
        state: directory
        owner: root
        group: root
        recurse: true
        mode: "u=rwx,g=rx,o=rx"

    - name: copy haproxy podman files
      copy:
        src: "{{ __file }}"
        dest: /opt/podman/resources/haproxypod/
      loop:
        - "./files/haproxy-Dockerfile"
        - "./files/haproxy-podman-compose.yml"
      loop_control:
        loop_var: __file

    - name: Create haproxy pod volume directories
      file:
        path: "{{ __dir }}"
        state: directory
        owner: root
        group: root
        recurse: true
        mode: "u=rwx,g=rx,o=rx"
      loop:
          - '/srv/haproxy/etc/haproxy'
          - '/srv/haproxy/etc/ssl/certs'
      loop_control:
        loop_var: __dir

    - name: copy haproxy.cfg
      template:
        src: ./templates/haproxy.cfg.j2
        dest: /srv/haproxy/etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: "u=rw,g=r,o=r"

    - name: Check if letsencrypt certificate exist
      stat:
        path: "/etc/letsencrypt/live/control.{{ guid }}.{{ subdomain }}"
      register: letsencrypt_certs

    - name: Generate letsencrypt certificate
      when: not letsencrypt_certs.stat.exists | bool 
      command: >-
         certbot-3 certonly 
         --standalone 
         --email {{ email }}
         --agree-tos  
         -d control.{{ guid }}.{{ subdomain }} -n
    
    - name: Remove existing /tmp/cert.pem
      file:
        path: /tmp/cert.pem
        state: absent

    - name: merge private key and certificate
      shell: cat "{{ item }}" >> /tmp/cert.pem
      loop:
        - "/etc/letsencrypt/live/control.{{ guid }}.{{ subdomain }}/privkey.pem"
        - "/etc/letsencrypt/live/control.{{ guid }}.{{ subdomain }}/cert.pem"

    - name: copy letsencrypt certificate
      copy:
        src: /tmp/cert.pem
        dest: /srv/haproxy/etc/ssl/certs/cert.pem
        owner: root
        group: root
        mode: "u=rw,g=r,o=r"

    - name: Create podman systemd service
      template:
        src: ./files/haproxy-pod.service
        dest: "/etc/systemd/system/haproxy-pod.service"
        owner: root
        group: root
        mode: "u=rw,g=r,o=r"

    - name: Enable and Start the new podman service
      service:
        name: haproxy-pod
        enabled: true
        state: started
      async: 3000
      poll: 30


